#include <iostream.h>
#include <string.h>
#include <conio.h>
#include <alloc.h>
#include <process.h>
#define SERVER 123456
class client;
void add_client(client *&matrix,long &size,long new_rec);
void rem_client(client *&matrix,long &size,long code);
void read_mark(client *matrix,long size);
int confirm_cl(client *matrix,long size,char *login_name,long code);

class client{
public:
    char name[31],login_name[6];
    long Password;
    long peyd_kwh;
    long code;
    long kwh;
    float kwh_cost;
    float pey_max;
  public:
    client();
    void paybill();
    void disconnect();
    char *get_login_name(){return login_name;}
    long get_code(){return code;}
    long get_pass(){return Password;}
    void out();
    void set_kwh(long k){kwh=k;}
    long get_kwh(){return kwh;}
};

client::client()
{
  cout<<"\n????? ??? ?????? ??? ?????? = ? ";
  cin>>code;
  cout<<"????? ?? ????? ??? ?????? (??????? 30 ??????????)= ? ";
  cin>>name;
  cout<<"????? login name ??? ?????? (?? ???? 5 ??????????)= ? ";
  cin>>login_name;
  cout<<"????? ??? ?????? ????????? (Password) = ? ";
  cin >>Password;
  cout<<"????? ?? ?????? ??? ???? KWH = ? ";
  cin >>kwh_cost;
  cout<<"????? ?? ??????? ???? ??????? = ? ";
  cin>>pey_max;
  peyd_kwh=0;
  kwh=0;
}

void client::disconnect()
{
  float pay;
  pay = (kwh-peyd_kwh)*kwh_cost;
  if(pay>pey_max){
    cout<<"???????   = "<<code<<"\n";
    cout<<"?????     = "<<name<<"\n";
    cout<<"KWH       = "<<kwh-peyd_kwh<<"\n";
    cout<<"?????     = "<<pay<<"\n";
    cout<<"??????? ??? ??????????????\n";
  }
}

void client::paybill()
{
  float ama,pama;
  long nkwh,bill;
  cout<<"????? ??? ??????? ??? ??????? = ? ";
  cin>>nkwh;
  if(nkwh>kwh)kwh=nkwh;
  pama=(kwh-peyd_kwh)*kwh_cost;
  cout<<"???????? ???? = "<<pama<<"\n";
  cout<<"????? ?? ????? ??? ?????? ?? ????????? (0 ??? ?????) = ? ";
  cin>>ama;
  if(ama==0)return;
  if(ama>pama)ama=pama;
  cout<<"????? ??? ?????? ?????????? ??????????? = ? ";
  cin>>bill;
  cout<<"??????? ??????????? "<<bill<<"  ????? "<<ama<<"\n";
  peyd_kwh=peyd_kwh+ama/kwh_cost;
}

void client::out()
{
  cout<<"\n???????               "<<code<<"\n";
  cout<<"????? ??????          "<<name<<"\n";
  cout<<"??????????? ???????   "<<peyd_kwh<<"\n";
  cout<<"??? ???????           "<<kwh<<"\n";
  cout<<"???????? ???????????  "<<(kwh-peyd_kwh)*kwh_cost<<"\n";
}


void main()
{
  char login_name[6];
  client *matrix;
  long size=0,newc,begin,fl,i;
  int ch,ch1;
  long adpass,kwh,code;
  for(;;){
    cout<<"\n????? 1 ?? ????? ???????\n";
    cout<<"????? 2 ?? ????? ????????????\n";
    cin>>ch;

    if(ch==1){
      cout<<"???????? ?? login_name (?? ???? 5 ??????????)= ? ";
      cin>>login_name;
      cout<<"????? ??? ?????? ????????? (Password) = ? ";
      cin>>code;
      fl=confirm_cl(matrix,size,login_name,code);
      if(fl)
	 matrix[fl-1].paybill();
      else
        continue;
    }

    if(ch==2){
      cout<<"????? ??? ?????? ????????? (Password)??? ??????????? = ? ";
      cin>>adpass;
      if(adpass!=SERVER){
	cout<<"????? ???????\n";
	continue;
      }
      cout<<"\n????? 1 ??? ?????? ???? ???????\n";
      cout<<"????? 2 ??? ?? ???????? ???? ??????\n";
      cout<<"????? 3 ??? ???????? ???????? ??????????????\n";
      cout<<"????? 4 ??? ??? ???????? ??? ??????????? ???? ??? ???????\n";
      cout<<"????? 0 ??? ?????\n";
      cin>>ch1;
      if(ch1==0)break;
      if(ch1==1){
        int new_rec;
        cout<<"\n????? ??? ?????? ??? ???? ???????? = ? ";
        cin>>new_rec;
        add_client(matrix,size,new_rec);
      }

      if(ch1==2){
        cout<<"????? ??? ?????? ??? ?????? ??? ?? ????????? = ? ";
        cin>>code;
	rem_client(matrix,size,code);
      }
      if(ch1==3){
	read_mark(matrix,size);
	for(i=0;i<size;i++)
	  matrix[i].disconnect();
      }
      if(ch1==4){
      	read_mark(matrix,size);
	for(i=0;i<size;i++)
	  matrix[i].out();
      }
    }
  }
  if(size>0)free(matrix);
}

void add_client(client *&matrix,long &size,long new_rec)
{
  long i,begin;
  if(size==0){
    matrix=(client *)malloc(new_rec*sizeof(client));
    if(matrix==NULL){
      cout<<"??? ??????? ?????? ????????? ?????\n";
      exit(1);
    }
    begin=0;
    size=new_rec;
  }
  else{
    matrix=(client *)realloc(matrix,(new_rec+size)*sizeof(client));
    if(matrix==NULL){
      cout<<"??? ??????? ?????? ????????? ?????\n";
      exit(1);
    }
    begin=size;
    size+=new_rec;
  }
  for(i=begin;i<size;i++){
    client a;
    matrix[i]=a;
  }
}

void rem_client(client *&matrix,long &size,long code)
{
  long i,fl=1;
  if(size==0){
    cout<<"??? ???????? ????????\n";
    return;
  }
  if(size==1){
    free(matrix);
    size=0;
    return;
  }
 
  for(i=0;i<size;i++)
    if(code==(matrix)[i].get_code()){
      fl=0;
      matrix[i]=matrix[size-1];
      size--;
      matrix=(client *)realloc(matrix,size*sizeof(client));
      if(matrix==NULL){
        cout<<"??? ??????? ?????? ????????? ?????\n";
        exit(1);
      }
      break;
    }
  if(fl)cout<<"??? ??????? ??????? ?? ?????? "<<code<<"\n";
}

void read_mark(client *matrix,long size)
{
  long i,kwh;
  if(size==0){
    cout<<"??? ???????? ????????\n";
    return;
  }
  cout<<"\n????? ??? ????????? ??? ????????\n\n";
  for(i=0;i<size;i++){
    cout<<"????? ??? ??????? ??? ??????? ??? ?????? ?? ?????? "<<matrix[i].get_code()<<" = ?";
    cin>>kwh;
    if(kwh<matrix[i].get_kwh()){
      cout<<"???????? ?????? ???? "<<matrix[i].get_kwh()<<"\n????? ??? ????\n";
      i--;
      continue;
    }
    matrix[i].set_kwh(kwh);
  }
}

int confirm_cl(client *matrix,long size,char *login_name,long code)
{ int i;
  if(size==0){
    cout<<"??? ???????? ????????\n";
    return 0;
  }
  for(i=0;i<size;i++)
    if(!strcmp(matrix[i].get_login_name(),login_name)){
      if(code==matrix[i].get_pass())return i+1;
    }
  cout<<"????? login_name ? Password\n";
  return 0;
}
